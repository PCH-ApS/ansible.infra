---
# Derive per-record vars (step 1)
- name: A+PTR | set base vars
  ansible.builtin.set_fact:
    fqdn: "{{ rec.name }}.{{ zone_name }}"
    ip: "{{ rec.ip }}"
    octets: "{{ rec.ip.split('.') }}"
    ttl: "{{ rec.ttl | default(nsupdate_default_ttl) }}"

# Use the derived list (step 2)
- name: A+PTR | set reverse vars
  ansible.builtin.set_fact:
    rev_zone: "{{ octets[2] }}.{{ octets[1] }}.{{ octets[0] }}.in-addr.arpa"
    ptr_label: "{{ octets[3] }}"


# Check current A
- name: A+PTR | current A?
  ansible.builtin.command: dig +short A {{ fqdn }} @127.0.0.1
  register: dig_a
  changed_when: false

# Update A if needed
- name: A+PTR | write A update
  when: dig_a.stdout.strip() != ip
  ansible.builtin.copy:
    dest: "/tmp/u-{{ rec.name }}.txt"
    owner: root
    group: root
    mode: "0600"
    content: |
      server {{ nsupdate_server }}
      zone {{ zone_name }}
      update delete {{ fqdn }} A
      update add {{ fqdn }} {{ ttl }} A {{ ip }}
      send

- name: A+PTR | apply A update
  when: dig_a.stdout.strip() != ip
  ansible.builtin.command: nsupdate -k {{ nsupdate_keyfile }} -v /tmp/u-{{ rec.name }}.txt
  changed_when: true

# Check current PTR
- name: A+PTR | current PTR?
  ansible.builtin.command: dig +short PTR {{ ptr_label }}.{{ rev_zone }} @127.0.0.1
  register: dig_ptr
  changed_when: false

# Update PTR if needed
- name: A+PTR | write PTR update
  when: dig_ptr.stdout.strip() != (fqdn + '.')
  ansible.builtin.copy:
    dest: "/tmp/u-ptr-{{ rec.name }}.txt"
    owner: root
    group: root
    mode: "0600"
    content: |
      server {{ nsupdate_server }}
      zone {{ rev_zone }}
      update delete {{ ptr_label }}.{{ rev_zone }} PTR
      update add {{ ptr_label }}.{{ rev_zone }} {{ ttl }} PTR {{ fqdn }}.
      send

- name: A+PTR | apply PTR update
  when: dig_ptr.stdout.strip() != (fqdn + '.')
  ansible.builtin.command: nsupdate -k {{ nsupdate_keyfile }} -v /tmp/u-ptr-{{ rec.name }}.txt
  changed_when: true
