---
# Install
- name: Install BIND9 + tools
  ansible.builtin.package:
    name: [bind9, bind9-utils, dnsutils]
    state: present

- name: Ensure directories exist
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: root
    group: bind
    mode: "{{ item.mode | default('0750') }}"
  loop:
    - { path: "{{ bind_zone_dir }}" }
    - { path: "{{ bind_keys_dir }}", mode: "0750" }

# NEW: allow bind to write journals/updated zones
- name: Ensure dynamic zone dir is writable for bind
  ansible.builtin.file:
    path: "{{ bind_zone_dir }}"
    owner: bind
    group: bind
    mode: "0770"

# TSIG key file (from vault)
- name: Write DDNS TSIG key for BIND
  ansible.builtin.copy:
    dest: "{{ nsupdate_keyfile }}"
    owner: root
    group: bind
    mode: "0640"
    content: |
      key "{{ ddns_key_name }}" {
          algorithm {{ ddns_key_algorithm }};
          secret "{{ ddns_key_secret }}";
      };
  notify: restart named

# Core configs
- name: Render named.conf.options
  ansible.builtin.template:
    src: named.conf.options.j2
    dest: /etc/bind/named.conf.options
    owner: root
    group: bind
    mode: "0640"
  notify: restart named

- name: Render named.conf.local
  ansible.builtin.template:
    src: named.conf.local.j2
    dest: /etc/bind/named.conf.local
    owner: root
    group: bind
    mode: "0640"
  notify: reload named

# Seed zone files once (SOA/NS only). After that, use DDNS.
- name: Seed forward zone if missing
  ansible.builtin.template:
    src: zone-seed-forward.j2
    dest: "{{ bind_zone_dir }}/db.{{ zone_name }}"
    owner: bind           # CHANGED
    group: bind
    mode: "0660"          # CHANGED: allow bind to rewrite
    force: no
  register: seed_fwd

- name: Seed reverse zones if missing
  ansible.builtin.template:
    src: zone-seed-reverse.j2
    dest: "{{ bind_zone_dir }}/db.{{ item }}.{{ reverse_base.split('.')[1] }}.{{ reverse_base.split('.')[0] }}"
    owner: bind           # CHANGED
    group: bind
    mode: "0660"          # CHANGED
    force: no
  loop: "{{ reverse_octets }}"
  register: seed_rev

# Validate configs/zones before reload
- name: Validate named.conf (load all zones)
  ansible.builtin.command: named-checkconf -z
  changed_when: false

- name: Validate forward zone file
  ansible.builtin.command: >
    named-checkzone {{ zone_name }} {{ bind_zone_dir }}/db.{{ zone_name }}
  changed_when: false

- name: Validate each reverse zone file
  ansible.builtin.command: >
    named-checkzone {{ item }}.{{ reverse_base.split('.')[1] }}.{{ reverse_base.split('.')[0] }}.in-addr.arpa
    {{ bind_zone_dir }}/db.{{ item }}.{{ reverse_base.split('.')[1] }}.{{ reverse_base.split('.')[0] }}
  loop: "{{ reverse_octets }}"
  changed_when: false

# Apply config changes now
- meta: flush_handlers

# Make sure named is up before nsupdate/dig
- name: Ensure DNS service is running (before nsupdate)
  ansible.builtin.service:
    name: "{{ bind_service }}"
    state: started
    enabled: true

# --- "Static" records via nsupdate (idempotent) ---

# A + PTR (loop via include)
- name: Ensure static A + PTR
  include_tasks: a_ptr.yml
  loop: "{{ static_a | default([]) }}"
  loop_control:
    loop_var: rec
    label: "{{ rec.name }} -> {{ rec.ip }}"

# CNAME (loop via include)
- name: Ensure static CNAMEs
  include_tasks: cname.yml
  loop: "{{ static_cname | default([]) }}"
  loop_control:
    loop_var: rec
    label: "{{ rec.name }} -> {{ rec.target }}"

# MX (replace whole set at the apex if any configured)
- name: Ensure MX at zone apex
  when: static_mx | default([]) | length > 0
  block:
    - name: Write MX update file
      ansible.builtin.copy:
        dest: /tmp/u-mx.txt
        owner: root
        group: root
        mode: "0600"
        content: |
          server {{ nsupdate_server }}
          zone {{ zone_name }}
          update delete {{ zone_name }} MX
          {% for r in static_mx %}
          update add {{ zone_name }} {{ r.ttl | default(nsupdate_default_ttl) }} MX {{ r.pref }} {{ r.host }}
          {% endfor %}
          send

    - name: Apply MX update
      ansible.builtin.command: nsupdate -k {{ nsupdate_keyfile }} -v /tmp/u-mx.txt
      register: mx_out
      changed_when: true

# TXT (loop via include)
- name: Ensure TXT records
  include_tasks: txt.yml
  loop: "{{ static_txt | default([]) }}"
  loop_control:
    loop_var: rec
    label: "TXT {{ rec.name | default('@') }}"

# Ensure service enabled
- name: Ensure named running and enabled
  ansible.builtin.service:
    name: "{{ bind_service }}"
    state: started
    enabled: true
